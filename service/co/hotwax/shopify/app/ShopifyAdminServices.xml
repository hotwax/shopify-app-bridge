<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="get" noun="ShopifyShopAccessToken">
        <description>
            Get the oauth shopify shop access token.
            https://shopify.dev/apps/auth/oauth/getting-started#step-5-get-an-access-token
        </description>
        <in-parameters>
            <parameter name="shop" required="true"/>
            <parameter name="code" required="true"/>
            <parameter name="clientId" required="true"/>
            <parameter name="clientSecret" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="accessToken"/>
        </out-parameters>
        <actions>
            <if condition="!shop.startsWith('https://')">
                <set field="shop" from="'https://' +  shop"/>
            </if>
            <script><![CDATA[
                import org.moqui.util.RestClient
                import org.moqui.util.RestClient.Method

                RestClient restClient = ec.service.rest()
                restClient.method(Method.POST)
                restClient.uri("${shop}/admin/oauth/access_token")
                restClient.addFieldPart("code", code);
                restClient.addFieldPart("client_id", clientId);
                restClient.addFieldPart("client_secret", clientSecret);
                try {
                    RestClient.RestResponse restResponse = restClient.call()
                    response = restResponse.jsonObject()
                    statusCode = restResponse.getStatusCode()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        ec.logger.warn("Unsuccessful with status code: ${statusCode} and response: ${response}")
                        ec.message.addError(response.toString());
                        return
                    }
                } catch (Exception e) {
                    ec.logger.error("Error in API call Error: ${e.getMessage()}")
                    ec.message.addError(e.getMessage());
                    return
                }
                accessToken = response.access_token
            ]]></script>
        </actions>
    </service>
    <service verb="request" noun="ShopNewAccessToken" type="remote-rest" method="post" location="${shop}/admin/oauth/access_token">
        <in-parameters>
            <parameter name="shop" required="true"/>
            <parameter name="client_id" required="true"/>
            <parameter name="client_secret" required="true"/>
            <parameter name="refresh_token" required="true"/>
            <parameter name="access_token" required="true"/>
        </in-parameters>
    </service>
    <service verb="get" noun="ShopifyShop">
        <description>Get the shopify shop data</description>
        <in-parameters>
            <parameter name="shop" required="true"/>
            <parameter name="accessToken" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shop" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="!shop.startsWith('https://')">
                <set field="shop" from="'https://' +  shop"/>
            </if>
            <script><![CDATA[
                import org.moqui.util.RestClient
                import org.moqui.util.RestClient.Method

                shopifyApiVersion = System.getProperty("shopify_api_version");
                RestClient restClient = ec.service.rest()
                restClient.method(Method.GET)
                restClient.uri("${shop}/admin/api/${shopifyApiVersion}/shop.json")
                restClient.addHeader("X-Shopify-Access-Token", accessToken);
                try {
                    RestClient.RestResponse restResponse = restClient.call()
                    response = restResponse.jsonObject()
                    statusCode = restResponse.getStatusCode()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        ec.logger.warn("Unsuccessful with status code: ${statusCode} and response: ${response}")
                        return
                    }
                } catch (Exception e) {
                    ec.logger.error("Error in API call Error: ${e.getMessage()}")
                    return
                }
                shop = response.shop;
            ]]></script>
        </actions>
    </service>

    <service verb="validate" noun="ShopifySessionToken">
        <description>
            Shopify session token authentication for embedded app.
            https://shopify.dev/apps/auth/oauth/session-tokens/getting-started
        </description>
        <in-parameters>
            <parameter name="sessionToken" required="true"/>
            <parameter name="clientId" required="true"/>
            <parameter name="clientSecret" required="true"/>
            <parameter name="shop" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="validToken" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="validToken" value="false" type="Boolean"/>
            <if condition="!shop.startsWith('https://')">
                <set field="shop" from="'https://' + shop"/>
            </if>
            <script>
                import com.auth0.jwt.algorithms.Algorithm;
                import com.auth0.jwt.exceptions.JWTDecodeException;
                import com.auth0.jwt.exceptions.JWTVerificationException;
                import com.auth0.jwt.interfaces.JWTVerifier;
                import com.auth0.jwt.interfaces.DecodedJWT;
                import com.auth0.jwt.JWT;
                <![CDATA[
                    try {
                        Algorithm algorithm = Algorithm.HMAC256(clientSecret);
                        JWTVerifier verifier = JWT.require(algorithm)
                            .withIssuer(shop + "/admin")
                            .build(); //Reusable verifier instance

                        DecodedJWT jwt = verifier.verify(sessionToken);
                        // Extract the exp value from the payload.
                        def exp = jwt.getClaim('exp').asString()
                        // TODO Verify that it's in the future.

                        // Extract the nbf value from the payload.
                        def nbf = jwt.getClaim('nbf').asString()
                        // TODO Verify that it was in the past.

                        // Extract the iss and dest fields from the payload.
                        def iss = jwt.getClaim('nbf').asString()
                        def dest = jwt.getClaim('dest').asString()
                        // TODO The top-level domains should match.
                        // The dest field specifies the shops that the request originated from. For example, myshop.myshopify.com.
                        if (!(shop.equals(dest))) {
                            ec.logger.warn("shop: ${shop} does not match with dest: ${dest} received in claim")
                            return;
                        }

                        // Extract the aud value from the payload.
                        def aud = jwt.getClaim('aud').asString()
                        // Verify that it matches the API key of your app.
                        if (!clientId.equals(aud)) {
                            ec.logger.warn("clientId: ${clientId} does not match with aud: ${aud} received in claim")
                            return;
                        }

                        //Extract the sub value from the payload.
                        def sub = jwt.getClaim('sub').asString() //This is the ID of the user that made the request.
                    } catch (JWTVerificationException exception) {
                        // Invalid signature/claims
                        ec.logger.warn("JWT Verification failed : ${exception.toString()}")
                        ec.message.addMessage("JWT Verification failed: : ${exception.toString()}", "danger")
                        return;
                    } catch (JWTDecodeException exception) {
                        // Invalid token
                        ec.logger.warn("JWT Decoding failed : ${exception.toString()}")
                        ec.message.addMessage("JWT Decoding failed : ${exception.toString()}", "danger")
                        return;
                    }
                ]]>
            </script>
            <set field="validToken" value="true" type="Boolean"/>
        </actions>
    </service>

    <service verb="verify" noun="Hmac" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="message"/>
            <parameter name="hmac"/>
            <parameter name="sharedSecret"/>
            <parameter name="digest" default-value="Base64"/>
        </in-parameters>
        <out-parameters>
            <parameter name="validSignature" type="Boolean"/>
        </out-parameters>
        <actions>
            <!-- Verifying hmac -->
            <!-- Calculate hmac using request body message and shared secret, and compare with the incoming hmac header -->
            <script><![CDATA[
                import javax.crypto.Mac
                import javax.crypto.spec.SecretKeySpec

                Mac hmacSha256 = Mac.getInstance("HmacSHA256")
                hmacSha256.init(new SecretKeySpec(sharedSecret.getBytes("UTF-8"), "HmacSHA256"))
                byte[] bytes = hmacSha256.doFinal(message?.getBytes("UTF-8"));
                String calculatedHmac = "";
                if ("Base64".equals(digest)) {
                    calculatedHmac = Base64.encoder.encodeToString(bytes)
                } else if ("Hex".equals(digest)) {
                    calculatedHmac = org.apache.commons.codec.binary.Hex.encodeHexString(bytes)
                }
            ]]></script>
            <set field="validSignature" from="calculatedHmac.equals(hmac)"/>
        </actions>
    </service>


    <service verb="get" noun="ShopAccessScope">
        <description>
            Get the oauth shopify shop AccessScope for the installed app
            https://shopify.dev/apps/auth/oauth/getting-started#step-5-get-an-access-token
        </description>
        <in-parameters>
            <parameter name="shopId" required="true"/>
            <parameter name="appId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="grantedAccessScopes" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.shopify.app.ShopifyShopAndApp" list="ssaList">
                <econdition field-name="shopId" from="shopId"/>
                <econdition field-name="appId" from="appId"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <if condition="!ssaList">
                <return error="true" message="No Shopify shop app found for shopId ${shopId} and appId ${appId}"/>
            </if>
            <set field="ssa" from="ssaList?ssaList[0]:null"/>

            <script><![CDATA[
                import org.moqui.util.RestClient
                import org.moqui.util.RestClient.Method

                RestClient restClient = ec.service.rest()
                restClient.method(Method.GET)
                restClient.uri("https://${ssa.myshopifyDomain}/admin/oauth/access_scopes.json")
                restClient.addHeader("X-Shopify-Access-Token", ssa?.shopAccessToken);
                response = null;
                try {
                    RestClient.RestResponse restResponse = restClient.call()
                    response = restResponse.jsonObject()
                    statusCode = restResponse.getStatusCode()
                    restResponse.checkError()
                } catch (Exception e) {
                    ec.logger.error("Error in API call Error: ${e.getMessage()}")
                    ec.message.addError(e.getMessage());
                    return
                }
                grantedAccessScopes = response.access_scopes*.handle
            ]]></script>
        </actions>
    </service>
</services>